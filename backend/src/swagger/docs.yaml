openapi: 3.0.0
info:
  title: Credit Jambo Admin API
  version: "1.0.0"
  description: |
    Admin API for managing users, devices, notifications, and transactions.

servers:
  - url: http://localhost:5000/api
    description: Local Admin Server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string

    AdminLoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          example: admin@example.com
        password:
          type: string
          example: Admin123!

    AdminLoginResponse:
      type: object
      properties:
        message:
          type: string
          example: Admin login successful
        token:
          type: string
        admin:
          type: object
          properties:
            id: { type: integer }
            name: { type: string }
            email: { type: string }

    LastTransaction:
      type: object
      nullable: true
      properties:
        id: { type: integer }
        type: { type: string, enum: [deposit, withdraw] }
        amount: { type: number }
        createdAt: { type: string, format: date-time }

    UserItem:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        email: { type: string }
        deviceId: { type: string, nullable: true }
        verified: { type: boolean }
        balance: { type: number }
        lastTransaction:
          $ref: "#/components/schemas/LastTransaction"

    NotificationItem:
      type: object
      properties:
        id: { type: integer }
        type: { type: string }
        message: { type: string }
        user_name: { type: string }
        email: { type: string }
        created_at:
          type: string
          format: date-time

    AdminTransactionItem:
      type: object
      properties:
        id: { type: integer }
        user_id: { type: integer }
        user_name: { type: string }
        account_number: { type: string }
        type:
          type: string
          enum: [deposit, withdraw]
        amount: { type: number }
        old_balance: { type: number }
        new_balance: { type: number }
        device_id: { type: string }
        created_at:
          type: string
          format: date-time

tags:
  - name: Admin Auth
    description: Authentication endpoints for admin users
  - name: Users
    description: Manage users and device verification
  - name: Notifications
    description: Admin view notifications
  - name: Transactions
    description: Admin view all user transactions

paths:
  /admin/login:
    post:
      tags: [Admin Auth]
      summary: Authenticate admin and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminLoginRequest"
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminLoginResponse"
        400:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users:
    get:
      security:
        - bearerAuth: []
      tags: [Users]
      summary: Get all users with balances + last transaction
      responses:
        200:
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserItem"

  /users/unverified:
    get:
      security:
        - bearerAuth: []
      tags: [Users]
      summary: Get users not yet verified by admin
      responses:
        200:
          description: Unverified users retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserItem"

  /users/{userId}/verify:
    patch:
      security:
        - bearerAuth: []
      tags: [Users]
      summary: Verify and approve a user device
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Device verified
        404:
          $ref: "#/components/schemas/ErrorResponse"

  /users/{userId}/unverify:
    patch:
      security:
        - bearerAuth: []
      tags: [Users]
      summary: Revoke user's verified device access
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Device unverified
        404:
          $ref: "#/components/schemas/ErrorResponse"

  /users/{userId}:
    delete:
      security:
        - bearerAuth: []
      tags: [Users]
      summary: Delete a user
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User deleted successfully
        404:
          $ref: "#/components/schemas/ErrorResponse"

  /notifications:
    get:
      security:
        - bearerAuth: []
      tags: [Notifications]
      summary: View all notifications
      responses:
        200:
          description: Notification list
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      $ref: "#/components/schemas/NotificationItem"

  /transactions:
    get:
      security:
        - bearerAuth: []
      tags: [Transactions]
      summary: Get all user transactions
      responses:
        200:
          description: Transactions retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: "#/components/schemas/AdminTransactionItem"
